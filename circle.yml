general:
  branches:
    ignore:
      - gh-pages # list of branches to ignore

machine:
  services:
    - docker
  hosts:
    typo3-app: 127.0.0.1
    flow: 127.0.0.1
    neos: 127.0.0.1
    surf.smoke.test.domain: 127.0.0.1
  environment:
    PHP_IMAGE_TAG: php56
    DB_USER: db-user
    DB_PASS: db-password

dependencies:
  pre:
    - 'docker pull million12/php-testing:$PHP_IMAGE_TAG':
        background: true
    - docker pull million12/mariadb:
        background: true

  override:
    # Build abstract million12/typo3-flow-neos-abstract image
    - docker build --tag=test/typo3-flow-neos-abstract .
    - docker build --tag=test/typo3-flow --file Tests/Dockerfile-Flow Tests/
    - docker build --tag=test/typo3-flow-no-preinstall --file Tests/Dockerfile-Flow Tests/
    - docker build --tag=test/typo3-neos --file Tests/Dockerfile-Neos Tests/

  post:
    # Launch DB backend
    - docker run -d --name=db --env="MARIADB_USER=$DB_USER" --env="MARIADB_PASS=$DB_PASS" million12/mariadb
    - docker logs -f db | tee -a ${CIRCLE_ARTIFACTS}/docker-db.log:
        background: true

# Run tests
test:
  override:
    # ##################################################
    # Flow: default setup
    # ##################################################
    # Launch it with default ENV variables
    - docker run -d --name=flow -p=8000:80 --link=db:db --env="T3APP_NAME=flow" test/typo3-flow
    - docker logs -f flow > ${CIRCLE_ARTIFACTS}/docker-flow.log:
        background: true
    # Wait till TYPO3 Flow is fully configured
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow.log; then break; else sleep 1; fi done
    # Test: do basic front-end tests
    - curl -L --head http://flow:8000 && curl -s -L http://flow:8000
    - curl -s -L --head http://flow:8000 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://flow:8000 | grep "X-Flow-Powered" && curl -s -L --head http://flow:8000 | grep "/flow/welcome"
    - curl -s -L http://flow:8000 | grep "Kickstart your first package"
    # Run all Flow tests (unit, functional)
    - |
      docker run -ti --volumes-from=flow --link=flow:web --link=db:db million12/php-testing:$PHP_IMAGE_TAG "
        su www -c \"
          cd ~/flow; \
          echo -e '\n\n======== RUNNING FLOW TESTS =======\n\n'; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/UnitTests.xml; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/FunctionalTests.xml
        \"
      "
    # Clean up
    - docker rm -f flow || true

    # ##################################################
    # Flow with T3APP_USE_SURF_DEPLOYMENT=TRUE
    # ##################################################
    - |
      docker run -d --name=flow-surf -p=8000:80 --link=db:db \
        --env="T3APP_NAME=flow" \
        --env="T3APP_USE_SURF_DEPLOYMENT=true" \
        --env="T3APP_SURF_SMOKE_TEST_DOMAIN=surf.smoke.test.domain" \
        test/typo3-flow
    - docker logs -f flow-surf > ${CIRCLE_ARTIFACTS}/docker-flow-surf.log:
        background: true
    # Wait till TYPO3 Flow is fully configured
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow-surf.log; then break; else sleep 1; fi done
    # Test: do basic front-end tests
    - curl -L --head http://flow:8000 && curl -s -L http://flow:8000
    - curl -s -L --head http://flow:8000 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://flow:8000 | grep "X-Flow-Powered" && curl -s -L --head http://flow:8000 | grep "/flow/welcome"
    - curl -s -L http://flow:8000 | grep "Kickstart your first package"
    # Test: Surf smoke domain
    - curl -sSL --head http://surf.smoke.test.domain:8000 | grep 404
    # Test: Surf smoke domain: make an alias to 'current' release, just to test if it's properly configured
    - |
      docker run -ti --volumes-from=flow-surf --link=flow-surf:web --link=db:db million12/php-testing:$PHP_IMAGE_TAG "
        su www -c \"cd ~/flow/surf/releases && ln -snf current next\"
      "
    - curl -sSL --head http://surf.smoke.test.domain:8000 | grep "200 OK"
    - curl -sSL http://surf.smoke.test.domain:8000 | grep "Kickstart your first package"
    # Run all Flow tests (unit, functional)
    - |
      docker run -ti --volumes-from=flow-surf --link=flow-surf:web --link=db:db million12/php-testing:$PHP_IMAGE_TAG "
        su www -c \"
          cd ~/flow/surf/releases/current; \
          echo -e '\n\n======== RUNNING FLOW TESTS =======\n\n'; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/UnitTests.xml; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/FunctionalTests.xml
        \"
      "
    # Clean up
    - docker rm -f flow-surf || true


    # ##################################################
    # Test Flow container without pre-installed app
    # ##################################################
    - docker run -d --name=flow-no-preinstall -p=8000:80 --link=db:db --env="T3APP_NAME=flow" test/typo3-flow-no-preinstall
    - docker logs -f flow-no-preinstall > ${CIRCLE_ARTIFACTS}/docker-flow-no-preinstall.log:
        background: true
    # Wait till TYPO3 Flow is fully configured
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow-no-preinstall.log; then break; else sleep 1; fi done
    # Test: do basic front-end tests
    - curl -L --head http://flow:8000 && curl -s -L http://flow:8000
    - curl -s -L --head http://flow:8000 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://flow:8000 | grep "X-Flow-Powered" && curl -s -L --head http://flow:8000 | grep "/flow/welcome"
    - curl -s -L http://flow:8000 | grep "Kickstart your first package"
    # Note: there's no need to run all unit/functional tests.
    # The main thing is to test that the application has been correctly installed, without pre-install process.
    # Clean up
    - docker rm -f flow-no-preinstall || true


    # ##################################################
    # Test Flow container without pre-installed app
    # and with T3APP_USE_SURF_DEPLOYMENT=TRUE
    # ##################################################
    - docker run -d --name=flow-surf-no-preinstall -p=8000:80 --link=db:db --env="T3APP_NAME=flow" --env="T3APP_USE_SURF_DEPLOYMENT=true" test/typo3-flow-no-preinstall
    - docker logs -f flow-surf-no-preinstall > ${CIRCLE_ARTIFACTS}/docker-flow-surf-no-preinstall.log:
        background: true
    # Wait till TYPO3 Flow is fully configured
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow-surf-no-preinstall.log; then break; else sleep 1; fi done
    # Test: do basic front-end tests
    - curl -L --head http://flow:8000 && curl -s -L http://flow:8000
    - curl -s -L --head http://flow:8000 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://flow:8000 | grep "X-Flow-Powered" && curl -s -L --head http://flow:8000 | grep "/flow/welcome"
    - curl -s -L http://flow:8000 | grep "Kickstart your first package"
    # Note: there's no need to run all unit/functional tests.
    # The main thing is to test that the application has been correctly installed, without pre-install process.
    # Clean up
    - docker rm -f flow-surf-no-preinstall || true


    # ##################################################
    # Build TYPO3 Neos container and do some basic front-end tests
    # Also test agains custom DB params (ie. hostname, user, pass)
    # ##################################################
    - |
      docker run -d --name=neos -p=8100:80 --link=db:db.local \
        --env="T3APP_NAME=neos" \
        --env="T3APP_DB_HOST=db.local" \
        --env="T3APP_DB_USER=$DB_USER" \
        --env="T3APP_DB_PASS=$DB_PASS" \
        --env="T3APP_DB_NAME=my_db_name" \
        test/typo3-neos
    - docker logs -f neos > ${CIRCLE_ARTIFACTS}/docker-neos.log:
        background: true
    # Wait till TYPO3 Neos is fully configured
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-neos.log; then break; else sleep 1; fi done
    # Test: do basic front-end tests
    - curl -L --head http://neos:8100 && curl -s -L http://neos:8100
    - curl -s --head http://neos:8100 | grep "HTTP/1.1 200 OK" && curl -s --head http://neos:8100 | grep "X-Flow-Powered"
    - curl -s http://neos:8100 | grep "Power when you need it"
    - curl -s http://neos:8100 | grep "Powered by Neos &amp; Flow"
    - curl -s -L http://neos:8100/neos | grep "Neos comes with"
    # Test: check if Neos is installed in $T3APP_NAME directory
    - docker run -ti --volumes-from=neos million12/php-testing "su www -c \"cd && ls -al neos\""
    # Clean up
    - docker rm -f neos || true


    # ###################################################################
    # Launch Neos container again, but do only initialisation for testing
    # ###################################################################
    - docker run -d --name=neos-testing -p=8200:80 --link=db:db --env="T3APP_DO_INIT_TESTS=true" --env="T3APP_VHOST_NAMES=neos dev.neos behat.dev.neos" test/typo3-neos
    - docker logs -f neos-testing > ${CIRCLE_ARTIFACTS}/docker-neos-testing.log:
        background: true
    # Wait till TYPO3 Neos is fully configured
    - while true; do if grep "nginx entered RUNNING state" -a ${CIRCLE_ARTIFACTS}/docker-neos-testing.log; then break; else sleep 1; fi done
    - curl -L --head http://neos:8200 && curl -s -L http://neos:8200

    # Run all Neos tests (unit, functional, behat), but do not fail the build in case of
    # any problems there. These are vendor tests and errors there
    # do not indicate that this Docker image is faulty.
    - |
      docker run -ti --volumes-from=neos-testing --link=neos-testing:web --link=db:db million12/php-testing:$PHP_IMAGE_TAG "
        env && \
        echo \$WEB_PORT_80_TCP_ADDR \$WEB_ENV_T3APP_VHOST_NAMES >> /etc/hosts && cat /etc/hosts && \
        su www -c \"
          cd ~/typo3-app; \
          echo -e '\n\n======== RUNNING NEOS TESTS =======\n\n'; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/UnitTests.xml; \
          bin/phpunit -c Build/BuildEssentials/PhpUnit/FunctionalTests.xml; \
          bin/behat -c Packages/Application/TYPO3.Neos/Tests/Behavior/behat.yml
        \"
      " || true
    # Clean up
    - docker rm -f neos-testing || true


    # ##################################################
    # Test case:
    # - run two Flow projects sharing the same data container
    # - as a result, when 2nd container is launched it will contain two configured vhost,
    #   for both projects.
    # We do that to make sure that these 2 different projects, in a separate directories
    # and with separete db work together correctly (i.e. Nginx starts with these 2 vhosts etc).
    # ##################################################
    - docker run -d -v /data --name=flow-multi-data busybox:latest

    - docker run -d --name=flow-multi-1 -p=8001:80 --link=db:db --volumes-from=flow-multi-data --env="T3APP_NAME=typo3-app" test/typo3-flow
    - docker logs -f flow-multi-1 > ${CIRCLE_ARTIFACTS}/docker-flow-muilti-1.log 2>&1:
        background: true
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow-muilti-1.log; then break; else sleep 1; fi done

    - docker run -d --name=flow-multi-2 -p=8002:80 --link=db:db --volumes-from=flow-multi-data --env="T3APP_NAME=flow" test/typo3-flow
    - docker logs -f flow-multi-2 > ${CIRCLE_ARTIFACTS}/docker-flow-muilti-2.log 2>&1:
        background: true
    - while true; do if grep "nginx entered RUNNING state" ${CIRCLE_ARTIFACTS}/docker-flow-muilti-2.log; then break; else sleep 1; fi done

    # make some hardcoded change in a demo package, so we can test against it
    # We replace 'Kickstart' word with 'Bootstrap' in the welcome screen
    - |
      docker run -it --volumes-from=flow-multi-data million12/php-testing:$PHP_IMAGE_TAG "su www -c \"
        cd ~/flow; \
        sed -i -r "s#Kickstart#Bootstrap#g" Packages/Framework/TYPO3.Welcome/Resources/Private/Templates/Standard/Index.html; \
        FLOW_CONTEXT=Production ./flow flow:cache:flush && ./flow cache:warmup
      \""

    # Test: do basic front-end tests against the 2nd container
    - curl -L --head http://typo3-app:8002 && curl -s -L http://typo3-app:8002 # just to see the output
    - curl -L --head http://flow:8002 && curl -s -L http://flow:8002 # just to see the output

    - curl -s -L --head http://typo3-app:8002 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://typo3-app:8002 | grep "X-Flow-Powered" && curl -s -L --head http://typo3-app:8002 | grep "/flow/welcome"
    - curl -s -L --head http://flow:8002 | grep "HTTP/1.1 200 OK" && curl -s -L --head http://flow:8002 | grep "X-Flow-Powered" && curl -s -L --head http://flow:8002 | grep "/flow/welcome"

    - curl -s -L http://typo3-app:8002 | grep "Kickstart your first package"
    - curl -s -L http://flow:8002 | grep "Bootstrap your first package"


deployment:
  rebuild_image_on_docker_hub:
    branch: [master, php56, php70]
    commands:
      - 'curl -H "Content-Type: application/json" --data "{\"docker_tag\": \"$PHP_IMAGE_TAG\"}" -X POST https://registry.hub.docker.com/u/million12/typo3-flow-neos-abstract/trigger/cb18c6d5-235e-405f-99c1-947df2ddacae/'
      - 'curl -X POST --data-urlencode "payload={\"channel\": \"#dev-docker-builds\", \"username\": \"CircleCI\", \"text\": \"*million12/typo3-flow-neos-abstract:$PHP_IMAGE_TAG* build triggered on <https://hub.docker.com/r/million12/typo3-flow-neos-abstract/builds/|Docker Hub> (from CI build <https://circleci.com/gh/million12/docker-typo3-flow-neos-abstract/$CIRCLE_BUILD_NUM|#$CIRCLE_BUILD_NUM>)\", \"icon_emoji\": \":whale2:\"}" https://hooks.slack.com/services/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'
